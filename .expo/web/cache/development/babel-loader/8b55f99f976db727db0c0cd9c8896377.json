{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport createDataContext from \"./createDataContext\";\nimport { useState } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nvar KEY = 'feed';\nvar rssFeeds = [{\n  title: 'G1 - Todas as notícias',\n  urlFeed: 'http://g1.globo.com/dynamo/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}, {\n  title: 'G1 - Brasil',\n  urlFeed: 'http://g1.globo.com/dynamo/brasil/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}, {\n  title: 'G1 - Tecnologia e Games',\n  urlFeed: 'http://g1.globo.com/dynamo/tecnologia/rss2.xml',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}, {\n  title: 'Jovem Nerd - Site Completo',\n  urlFeed: 'http://jovemnerd.com.br/rss',\n  descricao: '',\n  urlSite: '',\n  urlImagem: ''\n}];\n\nvar feedListReducer = function feedListReducer(state, action) {\n  var newState = [];\n\n  switch (action.type) {\n    case 'add_feed':\n      newState = [].concat(_toConsumableArray(state), [{\n        title: action.payload.title,\n        urlFeed: action.payload.urlFeed\n      }]);\n      saveStateFeed();\n      return newState;\n\n    case 'delete_feed':\n      newState = state.filter(function (f) {\n        return f.urlFeed !== action.payload;\n      });\n      deleteFeedStorage();\n      return newState;\n\n    case 'restore_state':\n      newState = action.payload;\n      return newState;\n\n    case 'delete_all':\n      clearStorage();\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nvar addFeed = function addFeed(dispatch) {\n  return function (title, urlFeed, callback) {\n    dispatch({\n      type: 'add_feed',\n      payload: {\n        title: title,\n        urlFeed: urlFeed\n      }\n    });\n    if (callback) callback();\n  };\n};\n\nvar deleteFeed = function deleteFeed(dispatch) {\n  return function (id) {\n    dispatch({\n      type: 'delete_feed',\n      payload: id\n    });\n  };\n};\n\nvar restoreState = function restoreState(dispatch) {\n  return function _callee() {\n    var savedState;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(KEY));\n\n          case 3:\n            savedState = _context.sent;\n\n            if (!savedState) {\n              console.log('não tem nada salvo');\n            } else {\n              dispatch({\n                type: 'restore_state',\n                payload: JSON.parse(savedState)\n              });\n            }\n\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('erro: ' + _context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n};\n\nvar deleteAll = function deleteAll(dispatch) {\n  return function () {\n    dispatch({\n      type: 'delete_all'\n    });\n  };\n};\n\nvar saveStateFeed = function saveStateFeed(value) {\n  var jsonValue;\n  return _regeneratorRuntime.async(function saveStateFeed$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          try {\n            jsonValue = JSON.stringify(value);\n            AsyncStorage.setItem(KEY, jsonValue);\n          } catch (e) {\n            console.log('erro: ' + e);\n          }\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar clearStorage = function clearStorage() {\n  return _regeneratorRuntime.async(function clearStorage$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.clear());\n\n        case 3:\n          _context3.next = 9;\n          break;\n\n        case 5:\n          _context3.prev = 5;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          alert('Algum problema ao limpar armazenamento');\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar deleteFeedStorage = function deleteFeedStorage() {\n  return _regeneratorRuntime.async(function deleteFeedStorage$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.removeItem(KEY));\n\n        case 3:\n          _context4.next = 9;\n          break;\n\n        case 5:\n          _context4.prev = 5;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log('Erro: ' + _context4.t0);\n          alert('Houve algum problema ao deletar o item');\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar _createDataContext = createDataContext(feedListReducer, {\n  addFeed: addFeed,\n  deleteFeed: deleteFeed,\n  restoreState: restoreState,\n  deleteAll: deleteAll\n}, rssFeeds),\n    Context = _createDataContext.Context,\n    Provider = _createDataContext.Provider;\n\nexport { Context, Provider };","map":{"version":3,"sources":["C:/Users/jose.carvalho/Documents/Dev/Android REACT/rss/src/context/FeedListContext.js"],"names":["React","createDataContext","useState","AsyncStorage","KEY","rssFeeds","title","urlFeed","descricao","urlSite","urlImagem","feedListReducer","state","action","newState","type","payload","saveStateFeed","filter","f","deleteFeedStorage","clearStorage","addFeed","dispatch","callback","deleteFeed","id","restoreState","getItem","savedState","console","log","JSON","parse","deleteAll","value","jsonValue","stringify","setItem","e","clear","alert","removeItem","Context","Provider"],"mappings":"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","sourcesContent":["import React from 'react';\nimport createDataContext from './createDataContext';\nimport { useState } from 'react'\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst KEY = 'feed';\n\nconst rssFeeds =  [\n    {\n        title: 'G1 - Todas as notícias',\n        urlFeed: 'http://g1.globo.com/dynamo/rss2.xml',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    },\n    {\n        title: 'G1 - Brasil',\n        urlFeed: 'http://g1.globo.com/dynamo/brasil/rss2.xml',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    },\n    {\n        title: 'G1 - Tecnologia e Games',\n        urlFeed: 'http://g1.globo.com/dynamo/tecnologia/rss2.xml',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    },\n    {\n        title: 'Jovem Nerd - Site Completo',\n        urlFeed: 'http://jovemnerd.com.br/rss',\n        descricao: '',\n        urlSite: '',\n        urlImagem: ''\n    }\n    \n];\n\n/*\n * Executa a função provida sobre o estado.\n */\nconst feedListReducer = (state, action) => {\n    let newState = [];\n    switch (action.type) {\n        case 'add_feed':\n            //adiciona feed ao state\n            newState = [...state,\n                {\n                    title: action.payload.title,\n                    urlFeed: action.payload.urlFeed\n                }\n            ];     \n\n            // Salvo o estado do feed e retorno para atualização da View\n            saveStateFeed();\n            return newState\n\n        case 'delete_feed':\n            newState = state.filter( f => f.urlFeed !== action.payload);\n            \n            deleteFeedStorage();\n            return newState;\n            \n        case 'restore_state':\n            newState = action.payload;\n            return newState;\n\n        case 'delete_all':\n            clearStorage();\n            return [];\n        default:\n            return state;\n    }\n};\n\n\n/**\n * Funções base para 'feedListReducer'. \n * Juntas, funcionam como funções agregadoras atuando sobre \n * o estado passado como parametro para 'feedListReducer'.\n */\n\nconst addFeed = dispatch => {\n    \n    //Adiciono callback para evitar problemas com uso de chamadas assíncronas\n    return (title, urlFeed, callback) => {\n        dispatch({ type: 'add_feed', payload: { title, urlFeed } });\n        \n        if (callback) callback();\n    };\n};\n\nconst deleteFeed = dispatch => {\n    return (id) => {\n        dispatch({ type: 'delete_feed', payload: id });\n    };\n};\n\nconst restoreState = dispatch => async () => {\n    \n        try {\n             const savedState = await AsyncStorage.getItem(KEY);\n            if (!savedState) {\n                console.log('não tem nada salvo');\n            }\n            else {\n                //console.log(savedState);\n                dispatch({ type: 'restore_state', payload: JSON.parse(savedState) })\n            }\n        } catch (e) {\n            console.log('erro: ' + e);\n        }\n    }\n\n\nconst deleteAll = dispatch => {\n    return () => {\n        dispatch({ type: 'delete_all' })\n    }\n}\n\n\n// === === =| FUNÇÕES AUXILIARES |= === === \n\nconst saveStateFeed = async (value) => {\n    try {\n        const jsonValue = JSON.stringify(value);\n        AsyncStorage.setItem(KEY, jsonValue);\n    } catch (e) {\n        console.log('erro: ' + e);\n    }\n}\n\nconst clearStorage = async () => {\n    try {\n        await AsyncStorage.clear();\n    }\n    catch (e) {\n        console.log(e);\n        alert('Algum problema ao limpar armazenamento');\n    }\n}\n\nconst deleteFeedStorage = async () => {\n    try {\n        await AsyncStorage.removeItem(KEY)\n      } catch(e) {\n        console.log('Erro: ' + e);\n        alert('Houve algum problema ao deletar o item');\n      }\n  }\n\n\n\n\n\n\n  \nexport const { Context, Provider } = createDataContext(\n    feedListReducer,\n    { addFeed, deleteFeed, restoreState, deleteAll },\n    rssFeeds\n);\n\n"]},"metadata":{},"sourceType":"module"}